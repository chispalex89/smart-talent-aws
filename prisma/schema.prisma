generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  firstName       String      @map("first_name")
  middleName      String?     @map("middle_name")
  lastName        String      @map("last_name")
  secondLastName  String?     @map("second_last_name")
  marriedLastName String?     @map("married_last_name")
  email           String      @unique
  status          String
  password        String
  isDeleted       Boolean     @map("is_deleted")
  created_at      DateTime    @default(now())
  updated_At      DateTime?   @updatedAt
  created_by      String
  updated_by      String?
  admins          Admin[]
  applicants      Applicant[]
  recruiters      Recruiter[]
  user_roles      UserRole[]

  @@index([email], map: "email_index")
  @@map("user")
}

model Admin {
  id         Int       @id @default(autoincrement())
  position   String?
  phone      String
  ext        String?
  phone2     String?
  ext2       String?
  userId     Int       @map("user_id")
  created_at DateTime  @default(now())
  updated_At DateTime? @updatedAt
  created_by String
  updated_by String?
  user       User      @relation(fields: [userId], references: [id])

  @@map("admin")
}

model Recruiter {
  id                     Int            @id @default(autoincrement())
  userId                 Int            @map("user_id")
  companyId              Int            @map("company_id")
  created_at             DateTime       @default(now())
  updated_At             DateTime?      @updatedAt
  created_by             String
  updated_by             String?
  job_applicant_reviewed JobApplicant[]
  company                Company        @relation(fields: [companyId], references: [id])
  user                   User           @relation(fields: [userId], references: [id])

  @@map("recruiter")
}

model Applicant {
  id                        Int                        @id @default(autoincrement())
  userId                    Int                        @map("user_id")
  created_at                DateTime                   @default(now())
  updated_At                DateTime?                  @updatedAt
  created_by                String
  updated_by                String?
  user                      User                       @relation(fields: [userId], references: [id])
  companyFavoriteApplicants CompanyFavoriteApplicant[]
  jobApplicants             JobApplicant[]
  professionalData          ProfessionalData[]
  AcademicData              AcademicData[]
  PersonalData              PersonalData[]
  JobPreferences            JobPreferences[]

  @@map("applicant")
}

model PersonalData {
  id                   Int           @id @default(autoincrement())
  documentId           String        @map("document_id")
  address              String
  phone                String
  mobile               String
  availabilityToTravel Boolean       @map("availability_to_travel")
  documentTypeId       Int           @map("document_type_id")
  genderId             Int           @map("gender_id")
  maritalStatusId      Int           @map("marital_status_id")
  countryOfResidencyId Int           @map("country_of_residency_id")
  driverLicenseId      Int           @map("driver_license_id")
  applicantId          Int           @map("applicant_id")
  created_at           DateTime      @default(now())
  updated_At           DateTime?     @updatedAt
  created_by           String
  updated_by           String?
  applicant            Applicant     @relation(fields: [applicantId], references: [id])
  country_of_residency Country       @relation(fields: [countryOfResidencyId], references: [id])
  document_type        DocumentType  @relation(fields: [documentTypeId], references: [id])
  driver_license       DriverLicense @relation(fields: [driverLicenseId], references: [id])
  gender               Gender        @relation(fields: [genderId], references: [id])
  marital_status       MaritalStatus @relation(fields: [maritalStatusId], references: [id])

  @@map("personal_data")
}

model ProfessionalData {
  id                  Int           @id @default(autoincrement())
  applicantId         Int           @map("applicant_id")
  description         String
  resume_url          String?
  lastAcademicLevelId Int           @map("last_academic_level_id")
  professionId        Int           @map("profession_id")
  lastJobHierarchyId  Int           @map("last_job_hierarchy_id")
  created_at          DateTime      @default(now())
  updated_At          DateTime?     @updatedAt
  created_by          String
  updated_by          String?
  applicant           Applicant     @relation(fields: [applicantId], references: [id])
  last_academic_level AcademicLevel @relation(fields: [lastAcademicLevelId], references: [id])
  last_job_hierarchy  JobHierarchy  @relation(fields: [lastJobHierarchyId], references: [id])
  profession          Profession    @relation(fields: [professionId], references: [id])

  @@map("professional_data")
}

model Company {
  id                          Int                        @id @default(autoincrement())
  name                        String
  taxId                       String                     @map("tax_id")
  website                     String?
  phone                       String
  description                 String
  active                      Boolean
  isDeleted                   Boolean                    @map("is_deleted")
  countryId                   Int                        @map("country_id")
  employmentSectorId          Int                        @map("employment_sector_id")
  created_at                  DateTime                   @default(now())
  updated_At                  DateTime?                  @updatedAt
  created_by                  String
  updated_by                  String?
  country                     Country                    @relation(fields: [countryId], references: [id])
  employment_sector           EmploymentSector           @relation(fields: [employmentSectorId], references: [id])
  company_favorite_applicants CompanyFavoriteApplicant[]
  recruiters                  Recruiter[]
  jobOffers                   JobOffer[]
  Membership                  Membership[]

  @@map("company")
}

model JobOffer {
  id                           Int              @id @default(autoincrement())
  uuid                         String
  name                         String
  ageRangeFrom                 Int              @map("age_range_from")
  ageRangeTo                   Int              @map("age_range_to")
  description                  String
  publicDescription            String?          @map("public_description")
  countryId                    Int              @map("country_id")
  isExperienceRequired         Boolean          @map("is_experience_required")
  requiredExperience           Int?             @map("required_experience")
  softwareSkills               Json             @map("software_skills")
  mainLanguageId               Int              @map("main_language_id")
  languageSkills               Json             @map("language_skills")
  otherLanguages               Json             @map("other_languages")
  isConfidential               Boolean          @map("is_confidential")
  featured                     Boolean
  requiredAvailabilityToTravel Boolean          @map("required_availability_to_travel")
  requiredDriverLicense        Boolean          @map("required_driver_license")
  expectedDriverLicense        Int[]            @map("expected_driver_license")
  schedule                     String
  vacancies                    Int
  hiringDate                   DateTime         @map("hiring_date")
  publicationDate              DateTime         @map("publication_date")
  receivesResumesByEmail       Boolean          @map("receives_resumes_by_email")
  status                       String
  companyId                    Int              @map("company_id")
  professionId                 Int              @map("profession_id")
  maritalStatusId              Int              @map("marital_status_id")
  employmentSectorId           Int              @map("employment_sector_id")
  jobHierarchyId               Int              @map("job_hierarchy_id")
  genderPreferenceId           Int              @map("gender_preference_id")
  minimumAcademicLevelId       Int              @map("minimum_academic_level_id")
  stateId                      Int              @map("state_id")
  cityId                       Int              @map("city_id")
  salaryRangeId                Int              @map("salary_range_id")
  workShiftId                  Int              @map("work_shift_id")
  contractTypeId               Int              @map("contract_type_id")
  created_at                   DateTime         @default(now())
  updated_At                   DateTime?        @updatedAt
  created_by                   String
  updated_by                   String?
  isDeleted                    Boolean          @default(false) @map("is_deleted")
  jobApplicants                JobApplicant[]
  company                      Company          @relation(fields: [companyId], references: [id])
  city                         City             @relation(fields: [cityId], references: [id])
  country                      Country          @relation(fields: [countryId], references: [id])
  employment_sector            EmploymentSector @relation(fields: [employmentSectorId], references: [id])
  gender_preference            GenderPreference @relation(fields: [genderPreferenceId], references: [id])
  job_hierarchy                JobHierarchy     @relation(fields: [jobHierarchyId], references: [id])
  marital_status               MaritalStatus    @relation(fields: [maritalStatusId], references: [id])
  minimum_academic_level       AcademicLevel    @relation(fields: [minimumAcademicLevelId], references: [id])
  profession                   Profession       @relation(fields: [professionId], references: [id])
  salary_range                 SalaryRange      @relation(fields: [salaryRangeId], references: [id])
  state                        State            @relation(fields: [stateId], references: [id])
  work_shift                   WorkShift        @relation(fields: [workShiftId], references: [id])
  contract_type                ContractType     @relation(fields: [contractTypeId], references: [id])

  @@map("job_offer")
}

model JobApplicant {
  id           Int       @id @default(autoincrement())
  appliedAt    DateTime  @map("applied_at")
  selected     Boolean
  selectedAt   DateTime  @map("selected_at")
  reviewed     Boolean
  reviewedAt   DateTime  @map("reviewed_at")
  applicantId  Int       @map("applicant_id")
  jobId        Int       @map("job_id")
  reviewedById Int       @map("reviewed_by_id")
  selectedById Int       @map("selected_by_id")
  created_at   DateTime  @default(now())
  updated_At   DateTime? @updatedAt
  created_by   String
  updated_by   String?
  applicant    Applicant @relation(fields: [applicantId], references: [id])
  job          JobOffer  @relation(fields: [jobId], references: [id])
  reviewed_by  Recruiter @relation(fields: [reviewedById], references: [id])

  @@map("job_applicant")
}

model AcademicData {
  id                        Int       @id @default(autoincrement())
  nativeSpanish             Boolean   @map("native_spanish")
  nativeEnglish             Boolean   @map("native_english")
  otherLanguages            Json      @map("other_languages")
  softwareKnowledge         Json      @map("software_knowledge")
  otherKnowledgeDescription String    @map("other_knowledge_description")
  applicantId               Int       @map("applicant_id")
  applicant                 Applicant @relation(fields: [applicantId], references: [id])
  created_at                DateTime  @default(now())
  updated_At                DateTime? @updatedAt
  created_by                String
  updated_by                String?

  @@map("academic_data")
}

model JobPreferences {
  id                         Int              @id @default(autoincrement())
  currentEmploymentStatusId  Int              @map("current_employment_status_id")
  desiredJobHierarchyId      Int              @map("desired_job_hierarchy_id")
  previousEmploymentSectorId Int              @map("previous_employment_sector_id")
  expectedSalaryId           Int              @map("expected_salary_id")
  workingDayId               Int              @map("working_day_id")
  contractTypeId             Int              @map("contract_type_id")
  countryId                  Int?             @map("country_id")
  stateId                    Int?             @map("state_id")
  cityId                     Int?             @map("city_id")
  zoneId                     Int?             @map("zone_id")
  applicantId                Int              @map("applicant_id")
  created_at                 DateTime         @default(now())
  updated_At                 DateTime?        @updatedAt
  created_by                 String
  updated_by                 String?
  applicant                  Applicant        @relation(fields: [applicantId], references: [id])
  city                       City?            @relation(fields: [cityId], references: [id])
  contract_type              ContractType     @relation(fields: [contractTypeId], references: [id])
  country                    Country?         @relation(fields: [countryId], references: [id])
  current_employment_status  EmploymentStatus @relation(fields: [currentEmploymentStatusId], references: [id])
  desired_job_hierarchy      JobHierarchy     @relation(fields: [desiredJobHierarchyId], references: [id])
  expected_salary            SalaryRange      @relation(fields: [expectedSalaryId], references: [id])
  previous_employment_sector EmploymentSector @relation(fields: [previousEmploymentSectorId], references: [id])
  state                      State?           @relation(fields: [stateId], references: [id])
  working_day                WorkShift        @relation(fields: [workingDayId], references: [id])
  zone                       Zone?            @relation(fields: [zoneId], references: [id])

  @@map("job_preference")
}

model CompanyFavoriteApplicant {
  id          Int       @id @default(autoincrement())
  applicantId Int       @map("applicant_id")
  companyId   Int       @map("company_id")
  created_at  DateTime  @default(now())
  updated_At  DateTime? @updatedAt
  created_by  String
  updated_by  String?
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  company     Company   @relation(fields: [companyId], references: [id])

  @@map("company_favorite_applicant")
}

model Membership {
  id               Int            @id @default(autoincrement())
  startDate        DateTime       @default(now()) @map("start_date")
  expirationDate   DateTime       @map("expiration_date")
  membershipTypeId Int            @map("membership_type_id")
  companyId        Int            @map("company_id")
  created_at       DateTime       @default(now())
  updated_At       DateTime?      @updatedAt
  created_by       String
  updated_by       String?
  membership_type  MembershipType @relation(fields: [membershipTypeId], references: [id])
  company          Company        @relation(fields: [companyId], references: [id])

  @@map("membership")
}

model Role {
  id               Int              @id @default(autoincrement())
  name             String
  description      String
  created_at       DateTime         @default(now())
  updated_At       DateTime?        @updatedAt
  created_by       String
  updated_by       String?
  isDeleted        Boolean          @map("is_deleted")
  role_permissions RolePermission[]
  user_roles       UserRole[]

  @@map("role")
}

model UserRole {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  roleId       Int       @map("role_id")
  assignedDate DateTime  @default(now()) @map("assigned_date")
  created_at   DateTime  @default(now())
  updated_At   DateTime? @updatedAt
  created_by   String
  updated_by   String?
  isDeleted    Boolean   @map("is_deleted")
  role         Role      @relation(fields: [roleId], references: [id])
  user         User      @relation(fields: [userId], references: [id])

  @@map("user_role")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  created_at   DateTime   @default(now())
  updated_At   DateTime?  @updatedAt
  created_by   String
  updated_by   String?
  isDeleted    Boolean    @map("is_deleted")
  permissions  Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@map("role_permission")
}

model Permission {
  id               Int              @id @default(autoincrement())
  name             String
  description      String
  active           Boolean
  created_at       DateTime         @default(now())
  updated_At       DateTime?        @updatedAt
  created_by       String
  updated_by       String?
  isDeleted        Boolean          @map("is_deleted")
  role_permissions RolePermission[]

  @@map("permission")
}

model DocumentType {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String?
  created_at    DateTime       @default(now())
  updated_At    DateTime?      @updatedAt
  created_by    String
  updated_by    String?
  isDeleted     Boolean        @map("is_deleted")
  personal_data PersonalData[]

  @@map("document_type")
}

model Gender {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String?
  created_at    DateTime       @default(now())
  updated_At    DateTime?      @updatedAt
  created_by    String
  updated_by    String?
  isDeleted     Boolean        @map("is_deleted")
  personal_data PersonalData[]

  @@map("gender")
}

model MaritalStatus {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String?
  created_at    DateTime       @default(now())
  updated_At    DateTime?      @updatedAt
  created_by    String
  updated_by    String?
  isDeleted     Boolean        @map("is_deleted")
  job           JobOffer[]
  personal_data PersonalData[]

  @@map("marital_status")
}

model Country {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  created_at      DateTime         @default(now())
  updated_At      DateTime?        @updatedAt
  created_by      String
  updated_by      String?
  isDeleted       Boolean          @map("is_deleted")
  companies       Company[]
  Job_Offer       JobOffer[]
  job_preferences JobPreferences[]
  personal_data   PersonalData[]
  states          State[]

  @@map("country")
}

model State {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  countryId       Int              @map("country_id")
  created_at      DateTime         @default(now())
  updated_At      DateTime?        @updatedAt
  created_by      String
  updated_by      String?
  isDeleted       Boolean          @map("is_deleted")
  cities          City[]
  job             JobOffer[]
  job_preferences JobPreferences[]
  country         Country          @relation(fields: [countryId], references: [id])

  @@map("state")
}

model City {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  stateId         Int              @map("state_id")
  created_at      DateTime         @default(now())
  updated_At      DateTime?        @updatedAt
  created_by      String
  updated_by      String?
  isDeleted       Boolean          @map("is_deleted")
  state           State            @relation(fields: [stateId], references: [id])
  job             JobOffer[]
  job_preferences JobPreferences[]
  zones           Zone[]

  @@map("city")
}

model Zone {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  cityId          Int              @map("city_id")
  created_at      DateTime         @default(now())
  updated_At      DateTime?        @updatedAt
  created_by      String
  updated_by      String?
  isDeleted       Boolean          @map("is_deleted")
  job_preferences JobPreferences[]
  city            City             @relation(fields: [cityId], references: [id])

  @@map("zone")
}

model DriverLicense {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String?
  created_at    DateTime       @default(now())
  updated_At    DateTime?      @updatedAt
  created_by    String
  updated_by    String?
  isDeleted     Boolean        @map("is_deleted")
  personal_data PersonalData[]

  @@map("driver_license")
}

model AcademicLevel {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  description       String?
  created_at        DateTime           @default(now())
  updated_At        DateTime?          @updatedAt
  created_by        String
  updated_by        String?
  isDeleted         Boolean            @map("is_deleted")
  job               JobOffer[]
  professional_data ProfessionalData[]

  @@map("academic_level")
}

model Profession {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  description       String?
  created_at        DateTime           @default(now())
  updated_At        DateTime?          @updatedAt
  created_by        String
  updated_by        String?
  isDeleted         Boolean            @map("is_deleted")
  Job_Offer         JobOffer[]
  professional_Data ProfessionalData[]

  @@map("profession")
}

model JobHierarchy {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  description       String?
  created_at        DateTime           @default(now())
  updated_At        DateTime?          @updatedAt
  created_by        String
  updated_by        String?
  isDeleted         Boolean            @map("is_deleted")
  job               JobOffer[]
  job_preferences   JobPreferences[]
  professional_data ProfessionalData[]

  @@map("job_hierarchy")
}

model EmploymentStatus {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  created_at      DateTime         @default(now())
  updated_At      DateTime?        @updatedAt
  created_by      String
  updated_by      String?
  isDeleted       Boolean          @map("is_deleted")
  job_preferences JobPreferences[]

  @@map("employment_status")
}

model EmploymentSector {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  created_at      DateTime         @default(now())
  updated_At      DateTime?        @updatedAt
  created_by      String
  updated_by      String?
  isDeleted       Boolean          @map("is_deleted")
  companies       Company[]
  job             JobOffer[]
  job_preferences JobPreferences[]

  @@map("employment_sector")
}

model SalaryRange {
  id              Int              @id @default(autoincrement())
  range           String
  description     String?
  created_at      DateTime         @default(now())
  updated_At      DateTime?        @updatedAt
  created_by      String
  updated_by      String?
  isDeleted       Boolean          @map("is_deleted")
  job_offer       JobOffer[]
  job_preferences JobPreferences[]

  @@map("salary_range")
}

model WorkShift {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  created_at      DateTime         @default(now())
  updated_At      DateTime?        @updatedAt
  created_by      String
  updated_by      String?
  isDeleted       Boolean          @map("is_deleted")
  job_offer       JobOffer[]
  job_preferences JobPreferences[]

  @@map("work_shift")
}

model ContractType {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  created_at      DateTime         @default(now())
  updated_At      DateTime?        @updatedAt
  created_by      String
  updated_by      String?
  isDeleted       Boolean          @map("is_deleted")
  job_preferences JobPreferences[]
  job_Offer       JobOffer[]

  @@map("contract_type")
}

model GenderPreference {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  created_at  DateTime   @default(now())
  updated_At  DateTime?  @updatedAt
  created_by  String
  updated_by  String?
  isDeleted   Boolean    @map("is_deleted")
  job         JobOffer[]

  @@map("gender_preference")
}

model MembershipType {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  price       Float
  salePrice   Float?       @map("sale_price")
  description String?
  created_at  DateTime     @default(now())
  updated_At  DateTime?    @updatedAt
  created_by  String
  updated_by  String?
  isDeleted   Boolean      @map("is_deleted")
  features    String[]
  membership  Membership[]

  @@map("membership_type")
}

model SoftwareSkills {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_At  DateTime? @updatedAt
  created_by  String
  updated_by  String?
  isDeleted   Boolean   @map("is_deleted")

  @@map("software_skill")
}

model Language {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_At  DateTime? @updatedAt
  created_by  String
  updated_by  String?
  isDeleted   Boolean   @map("is_deleted")

  @@map("language")
}

model SkillLevel {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_At  DateTime? @updatedAt
  created_by  String
  updated_by  String?
  isDeleted   Boolean   @map("is_deleted")

  @@map("skill_level")
}

model OtherLanguages {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_At  DateTime? @updatedAt
  created_by  String
  updated_by  String?
  isDeleted   Boolean   @map("is_deleted")

  @@map("other_languages")
}
